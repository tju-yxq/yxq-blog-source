[{"author":null,"categories":["计算机系统"],"content":"基本概念 编译过程 预处理 处理源代码中的预处理指令，如宏定义、条件编译、头文件包含等\n例：\ngcc -E main.c -o main.i # 将 main.c 预处理为 main.i 编译 将预处理后的文件转换为汇编代码\n例：\ngcc -S main.i -o main.s # 将 main.i 编译为 main.s 汇编 将汇编代码转换为机器指令（目标文件）\n例：\ngcc -c main.s -o main.o # 将 main.s 汇编为 main.o（可重定位目标文件） 链接 将多个目标文件和库文件合并为一个可执行文件\n例：\ngcc main.o func.o -o prog # 将 main.o 和 func.o 链接为可执行文件 prog 为什么要链接 模块化 将程序分成多个模块，便于开发和维护 提高构建程序的效率 时间：只重新编译修改过的模块，然后重新链接，节省时间 空间：多个程序可以共享相同的库代码（动态链接），节省磁盘空间 目标文件 可重定位目标文件（Relocatable Object File） 包含代码和数据，但尚未指定绝对地址，需要链接后才能运行 文件格式：.o（Linux）或 .obj（Windows） 可执行目标文件（Executable Object File） 包含可直接加载到内存中执行的程序 文件格式：a.out（Linux）或 .exe（Windows） 共享目标文件（Shared Object File） 可以在加载或运行时被动态地加载到内存并链接 文件格式：.so（Linux）或 .dll（Windows） ELF文件结构 可执行和可链接格式（Executable and Linkable Format） 使用 readelf -a main.o 查看ELF文件结构 结构图： 节区 描述 .text 已编译程序的机器代码 .rodata 只读数据（如printf格式串和switch跳转表） .data 已初始化的全局和静态C变量（局部变量在栈中） .bss 未初始化的全局和静态C变量（目标文件中不占空间，仅为占位符） .symtab 符号表（存放函数和全局变量信息，不包含局部变量） .rel.text 代码重定位信息（链接时需要修改的位置） .rel.data 数据重定位信息（被模块引用或定义的全局变量重定位信息） …","date":1758585600,"dir":"post\\计算机系统6\\","expirydate":-62135596800,"fuzzywordcount":2200,"html":"编译与链接详解","keywords":null,"kind":"page","lang":"en","lastmod":1758585600,"objectID":"78cb3ad7c315f8de2a5404fc10a91e0c","permalink":"https://tju-yxq.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F6/","publishdate":"2025-09-23T00:00:00Z","readingtime":5,"relpermalink":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F6/","section":"post","tags":["计算机系统"],"title":"计算机系统基础1 笔记6","type":"post","url":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F6/","weight":0,"wordcount":2137},{"author":null,"categories":["计算机系统"],"content":"流水线 未流水化硬件设计 （这是一个例子，通过组合逻辑门的时间假设是300ps，加载到寄存器的时间假设是20ps，总延迟就是320ps)\n流水线抽象 （不要管右上角的clock)\n指令吞吐量（评估流水线效率） 指令吞吐量是指处理器在单位时间内完成的指令数量。在流水线中，理想情况下每个时钟周期可以完成一条指令（即吞吐量为1指令/周期）。 对上面给出的两个图进行评估： 一秒钟可以进行10⁹次操作。 引入单位 GIPS（每秒十亿条指令或每秒千兆条指令)。\n基本原理 流水线技术通过将指令处理过程分解为多个阶段（stage），使得多个指令可以同时处于不同的处理阶段，从而提高处理器的吞吐率。类似于工厂的装配线。 演示图如下： （中间出现了三个操作都处理的时候)\n加速比 = 非流水线执行时间 / 流水线执行时间 （应用流水线得到的效率提升的量化）\n流水线非理想情况 各个阶段延迟不等 （受最慢因素限制） 流水线图如下： （吞吐量下降)\n流水线过深 分支预测惩罚增大分支结果确定前需执行更多后续指令，预测错误时清空流水线代价更高。 流水线气泡比例上升填充/排空流水线所需周期数随深度线性增加，短指令序列效率显著降低。 硬件复杂度激增需更多流水线寄存器、更复杂的冒险检测和转发电路，功耗与面积大幅增加。 资源冲突加剧 多级流水线争用同一功能单元（如内存端口），需增加冗余资源导致成本上升。 经典的五级流水线结构 取指从内存取指令。 译码对取出的指令进行译码，识别操作码和操作数，读取寄存器文件中的值。 执行执行指令所需的操作，如算术运算、逻辑运算等。 访存访问数据存储器，如加载（Load）或存储（Store）数据。 写回 将执行结果或从内存中读取的数据写回到寄存器文件。 流水线的局限性 阶段延迟不均衡、流水线启动/排空开销、资源冲突、依赖导致的停顿。 举例：如果有某个步骤开销过大，那么其他指令都受其时间开销的制约。\n指令间的数据依赖 **插入延迟（气泡）**分三类： RAW（写后读） WAR（读后写） WAW（写后写） 在按序流水线中，主要面临RAW依赖，而乱序执行可以处理所有依赖。 乱序执行 动态调度指令，绕过依赖提前执行后续独立指令。 指令间的控制依赖 遇到 if-else产生的分支指令时，流水线要停顿。 缓解措施：通常通过分支预测技术来缓解，即预测分支的方向，提前取指执行。\n","date":1756166400,"dir":"post\\计算机系统4\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":"处理器体系结构","keywords":null,"kind":"page","lang":"en","lastmod":1756166400,"objectID":"3dcf31154fc183a459e27ebbfdb6617d","permalink":"https://tju-yxq.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F4/","publishdate":"2025-08-26T00:00:00Z","readingtime":2,"relpermalink":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F4/","section":"post","tags":["计算机系统"],"title":"计算机系统基础1 笔记4","type":"post","url":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F4/","weight":0,"wordcount":939},{"author":null,"categories":["计算机系统"],"content":"存储技术 非易失存储器 ROM, PROM, EPROM, EEPROM, flash memory RAM（随机访问存储器/易失寄存器） SRAM(静态RAM) 将每个位存储在一个双稳态存储器单元（六晶体管电路实现） 特点：\n只要有电则永久保持值，抗干扰能力强（干扰消除后恢复稳定值） DRAM（动态RAM） 将每个位存储为电容充电 特点：\n结构密集（每单元=1电容+1访问晶体管），对干扰敏感（电压扰乱后不可恢复），光照影响电压 主存组成：DRAM芯片构成 RAM总结 磁盘 结构 盘片：多个转盘组合 面：每盘片两个存储面 磁道（柱面）： 同心圆结构 柱面：所有盘片相同半径的磁道集合 扇区：磁道分段，扇区间有间隙分隔 容量 决定因素：\n计算公式：\n示例：\n扇区访问 寻道时间：移动磁头到目标磁道的时间 旋转时间：等待目标扇区转到磁头下\n最坏情况：需等待磁盘转一整圈\n传送时间：读取扇区数据的时间\n平均访问时间示例：\n固态硬盘(SSD) 基于闪存的存储技术 与磁盘比较：\n存储技术趋势 处理器和存储器性能持续提升 处理器与存储器性能差距不断扩大 局部性原理 时间局部性 特点：被访问过的位置很可能短期内再次访问\n示例： int sum = 0; for (int i = 0; i \u0026amp;lt; n; i++) { sum += a[i]; // sum被重复访问 } 空间局部性 特点：访问某个位置后很可能访问其邻近位置\n良好示例（行优先遍历）：\nfor (int i = 0; i \u0026amp;lt; n; i++) { for (int j = 0; j \u0026amp;lt; n; j++) { sum += a[i][j]; } } 较差示例（列优先遍历）：\nfor (int j = 0; j \u0026amp;lt; n; j++) { for (int i = 0; i \u0026amp;lt; n; i++) { sum += a[i][j]; } } 存储器层次结构 金字塔结构 高层特点：速度快、单位成本高 底层特点：速度慢、单位成本低 核心思想：用高层缓存底层数据，以低成本获取高性能 缓存机制 （第k层是k+1层的缓存)\n缓存命中 在k层找到目标数据副本 缓存未命中 冷未命中：缓存初始为空时的首次访问（如程序启动） 冲突未命中：多数据块映射到同一缓存组（直接映射/组相联中发生） 容量未命中：工作集超过缓存容量（频繁访问大量 …","date":1756166400,"dir":"post\\计算机系统5\\","expirydate":-62135596800,"fuzzywordcount":1500,"html":"存储器层次结构","keywords":null,"kind":"page","lang":"en","lastmod":1756166400,"objectID":"08aafbc95c41d6667dfa097a3fbcbeeb","permalink":"https://tju-yxq.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F5/","publishdate":"2025-08-26T00:00:00Z","readingtime":3,"relpermalink":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F5/","section":"post","tags":["计算机系统"],"title":"计算机系统基础1 笔记5","type":"post","url":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F5/","weight":0,"wordcount":1484},{"author":null,"categories":["学生工作"],"content":"一、学期前 确认留任助理 在大群中发布留任助理的问卷，然后添加留任助理，新建一个学期的助理群 最好是老师+学生两重确认 上传助理审核标准 二、学期中 每周值班一个半小时 在鹏翔四斋一站式学生社区综合服务中心，记得要开始前在钉钉中考勤打卡中签到，然后在结束后签到并填写值班日志（钉盘-\u0026amp;gt;团队文件-\u0026amp;gt;全员文件夹-\u0026amp;gt;25261工作文件-\u0026amp;gt;值班文件）\n定期招聘\n一般开学后是有一个大招聘会，假如基地很缺人或者老师要求可以联系主任在天大学生资助发布招聘通知，以下是招聘流程\n面试 在自己值班时间面试，一般三个问题“家庭经济困难学生”“学生工作”“工作相关的能力”，然后将面试印象填写在在线文档中\n筛选 在在线文档中，根据自己需求按照志愿顺序选择需要的 学习通学习+推老师微信+发岗位备案表+邀请进基地群 在后续中要督促助理交备案表，备案表要在一周之内交至鹏翔四斋一站式学生社区综合服务中心，另外需要在助理信息表中更新信息\n育人活动 策划-举办-汇报，三个基地举办一个，考核是对参与的三个基地的基地助理参与情况，不是对育人活动举办内容效果\n定期联系老师交流\n每学期一次即可\n每月提交助理审核结果\n三、学期结束前 部门岗位延岗表+岗位确认单+岗位申请表（） 述职大会 准备PPT，将结合学期内表现评奖 ","date":1752364800,"dir":"post\\勤工助学基地负责人职责\\","expirydate":-62135596800,"fuzzywordcount":600,"html":"分为学期前中后","keywords":null,"kind":"page","lang":"en","lastmod":1752364800,"objectID":"1d37023821e19b9bd15c65ecf1d38a3a","permalink":"https://tju-yxq.github.io/post/%E5%8B%A4%E5%B7%A5%E5%8A%A9%E5%AD%A6%E5%9F%BA%E5%9C%B0%E8%B4%9F%E8%B4%A3%E4%BA%BA%E8%81%8C%E8%B4%A3/","publishdate":"2025-07-13T00:00:00Z","readingtime":2,"relpermalink":"/post/%E5%8B%A4%E5%B7%A5%E5%8A%A9%E5%AD%A6%E5%9F%BA%E5%9C%B0%E8%B4%9F%E8%B4%A3%E4%BA%BA%E8%81%8C%E8%B4%A3/","section":"post","tags":["学生工作述职"],"title":"勤工助学基地负责人职责","type":"post","url":"/post/%E5%8B%A4%E5%B7%A5%E5%8A%A9%E5%AD%A6%E5%9F%BA%E5%9C%B0%E8%B4%9F%E8%B4%A3%E4%BA%BA%E8%81%8C%E8%B4%A3/","weight":0,"wordcount":531},{"author":null,"categories":["计算机系统"],"content":"汇编指令格式 [label :] [opcode] [operand 1] [,oprand 2] 标号 操作码 操作数1\n操作数类型 立即数（整数常量） 例 $0x400, $-533 寄存器 例如： %rax, %r13 (%rsp 作栈指针) 存储器 地址指向的连续的8个字节 例： (%rax) 表示调用rax存储的地址对应的内存 数据传送指令 mov 操作码后缀 C语言类型声明 数据类型 后缀 大小 char Byte b 1 short Word w 2 int Double Word l 4 long Quad Word q 8 char* Quad Word q 8 float Single precision s 4 double Double precision l 8 还有一些特别的组合后缀（z表示0扩展，s表示符号位扩展）\rMOV S,D 即 S-\u0026amp;gt;D 例： movq %rdi ,%rax 表示把rdi中的数复制到rax里 特别情况（我感觉不会考啊）\r如果把位数低的数x传入到原本8字节都填充的寄存器中： if (x位数 == 32) {寄存器高32位会清零} if (x位数 != 32) {只覆盖自己长度的数值，对于高位的不覆盖} 存储器寻址方式 间接寻址（和c中指针作用相同） (Rb) 例：(%rax) 取rax存储的地址指向的内存 基地址+偏移量 D(Rb) 例：8(%rax) 变址寻址 D(Rb,Ri) 例：8(%rdi,rsi) → 8 + rdi + rsi 比例变址寻址 D(Rb,Ri,s) 例：8(%rax,%rdx,4) → 8 + rax + rdx * 4 结合下图食用： 栈指令 pushq S 将S入栈（效果如下）： subq $8,%rsp // 栈指针向下移动8字节 movq S,(%rsp) // 将S的数值丢入指针所指空间\npopq D 将8字节（四字）出栈：\n算数和逻辑操作 地址计算指令 lea（load effective address） 形式：lea src dst src：是寻址模式的表达式 dst：目的地 用途：计算地址（不用引用内存数值） 如图： （用c的话来说就是mov解引用，而lea不) 单操作数指令 指令 效果 incq Dest Dest = Dest + 1 decq Dest …","date":1752278400,"dir":"post\\计算机系统3\\","expirydate":-62135596800,"fuzzywordcount":2400,"html":"x86_64汇编语言","keywords":null,"kind":"page","lang":"en","lastmod":1752278400,"objectID":"0515aae44635098e8ee546cb25ea0197","permalink":"https://tju-yxq.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F3/","publishdate":"2025-07-12T00:00:00Z","readingtime":5,"relpermalink":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F3/","section":"post","tags":["计算机系统"],"title":"计算机系统基础1 笔记3","type":"post","url":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F3/","weight":0,"wordcount":2333},{"author":null,"categories":["复习资料"],"content":"Section 1 West Is West (第一章：西方即西方) Four earliest ancient civilizations (四大早期文明古国) Ancient Babylon (Mesopotamia), Egypt, India and China (古巴比伦（美索不达米亚）、古埃及、古印度和古中国) River valleys (对应流域) Tigris and Euphrates Valley (底格里斯河与幼发拉底河流域，即两河流域) Nile Valley (尼罗河流域) Indus Valley (印度河流域) Huanghe River Valley (黄河流域) Cradle of western civilization: ancient Greece (西方文明的摇篮：古希腊) Began at Sumer (文明起源于苏美尔) Developed in Egypt (在埃及得到发展) Flowered in Greece (在希腊开花结果，走向繁荣) I. The concept of the West (西方的概念) \u0026amp;ldquo;The West\u0026amp;rdquo; as an idea (“西方”是一个观念) Theoretical boundary between Asia \u0026amp;amp; Europe (East \u0026amp;amp; West): the Ural Mountains (亚洲与欧洲（东方与西方）的理论分界线：乌拉尔山脉) The boundary often defined to follow (通常遵循的分界线包括): - the Ural Mountains (乌拉尔山脉), the Ural River (乌拉尔河), the Caspian Sea (里海), the Greater Caucasus (大高加索山脉), the Black Sea (黑海), the Turkish Strait (土耳其海峡), the Aegean Sea (爱琴海) \u0026amp;ldquo;The West\u0026amp;rdquo; has not been labeled geographically, normally referring to\u0026amp;hellip; (“西方”并非严格的地理标签，通常指代\u0026amp;hellip;) - the …","date":1750636800,"dir":"post\\西方文化掠影复习资料\\","expirydate":-62135596800,"fuzzywordcount":11600,"html":"大二下的英语课","keywords":null,"kind":"page","lang":"en","lastmod":1750636800,"objectID":"e0c36cbcc0bc1580a39a369da257170f","permalink":"https://tju-yxq.github.io/post/%E8%A5%BF%E6%96%B9%E6%96%87%E5%8C%96%E6%8E%A0%E5%BD%B1%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/","publishdate":"2025-06-23T00:00:00Z","readingtime":23,"relpermalink":"/post/%E8%A5%BF%E6%96%B9%E6%96%87%E5%8C%96%E6%8E%A0%E5%BD%B1%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/","section":"post","tags":["英语"],"title":"《西方文化掠影》复习资料","type":"post","url":"/post/%E8%A5%BF%E6%96%B9%E6%96%87%E5%8C%96%E6%8E%A0%E5%BD%B1%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/","weight":0,"wordcount":11516},{"author":null,"categories":["计算机系统"],"content":"信息的存储 字长 计算机（CPU）一次整数运算能处理的位数 示例： 32位系统：字长32 64位系统：字长64 字节序 小端序（LE - Little Endian） 低位字节存储在低地址\n示例（0x3039在32位系统的存储）：\n39 30 00 00 大端序（BE - Big Endian） 高位字节存储在低地址\n示例（0x3039在32位系统的存储）：\n00 00 30 39 注意：指针指向1字节大小的内存，因此39、30作为两个整体存储\n指针的存储 不同编译器和计算机的指针可能分配到不同地址 每次运行结果的指针都可能不同（安全考虑） 位运算、逻辑运算 基本操作 位运算 0x0F \u0026amp;amp; 0xF0 = 0x00; // 按位与 0x0F | 0xF0 = 0xFF; // 按位或 0x0F ^ 0xFF = 0xF0; // 异或 ~0x00 = 0xFF; // 取反 1 \u0026amp;lt;\u0026amp;lt; 3 = 8; // 左移（乘以8） -8 \u0026amp;gt;\u0026amp;gt; 2 = -2; // 算术右移（符号位填充） 逻辑运算 0 \u0026amp;amp;\u0026amp;amp; 1 = 0; // 逻辑与 0 || 1 = 1; // 逻辑或 !0 = 1; // 逻辑非 高级操作 建议结合LAB1复习（含典型例题）\n整数的表示 无符号数 定义：所有位表示数值，无符号位 范围：$0$ 到 $2^w - 1$（w为位数） 示例（8位）：0~255 有符号数（补码表示） 定义： 最高位为符号位（权重为负） 正数：补码=原码 负数：非符号位取反后+1 表示范围对比 类型 范围（w位） 无符号数 $0$ 到 $2^w - 1$ 有符号数 $-2^{w-1}$ 到 $2^{w-1}-1$ 示例（w=8）：\n无符号：0~255 有符号：-128~127 C语言混用问题 int a = -1; unsigned int b = 1; if(a \u0026amp;gt; b) // 返回true（a被强制转换为无符号数0xFFFFFFFF） 注意：有符号数与无符号数混用时，有符号数隐式转换为无符号数，可能导致逻辑错误\n整数的运算 整数扩展 类型 规则 示例（8位→16位） 无符号数 0扩展 0xFE → 0x00FE（254） 有符号数 符号位扩展 0xFE → 0xFFFE（-2） 整数截断 规则：丢弃高w-k位，保留低k位 示例： …","date":1750636800,"dir":"post\\计算机系统2\\","expirydate":-62135596800,"fuzzywordcount":1500,"html":"信息的表示与处理","keywords":null,"kind":"page","lang":"en","lastmod":1750636800,"objectID":"4f24e04a90bcb925b1d42ed0c993a0f5","permalink":"https://tju-yxq.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F2/","publishdate":"2025-06-23T00:00:00Z","readingtime":3,"relpermalink":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F2/","section":"post","tags":["计算机系统"],"title":"计算机系统基础1 笔记2","type":"post","url":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F2/","weight":0,"wordcount":1443},{"author":null,"categories":["计算机系统"],"content":"Linux 命令笔记 一、文件和目录操作 ls：列出目录内容\nls -a：显示隐藏文件（以 . 开头） ls -l：显示文件和目录的详细属性（权限、所有者等） cd：切换目录\ncd /path/to/directory # 进入指定目录 pwd：显示当前工作目录路径\nmkdir：创建目录\nmkdir test # 创建 test 目录 mkdir -p test1/test2 # 递归创建 test1 和 test1/test2 目录 rmdir：删除空目录\nrmdir test # 删除空目录 test rmdir test1/test2 # 删除 test1/test2 空目录 *：通配符（匹配任意字符）\nls *.txt # 列出所有 .txt 文件 cp：复制文件/目录\ncp file /usr/men/tmp/file1 # 复制文件并重命名 cp -rf /usr/men /usr/zh # 递归复制目录（含子目录） cp -rf test/* test1 # 强制复制 test 下所有内容到 test1 cp -i /usr/men/m*.c /usr/zh # 交互式复制（覆盖前确认） rm：删除文件/目录\nrm f1 # 删除文件 f1 rm f1 f2 # 删除多个文件 rm -rf test # 强制递归删除目录（慎用！） mv：移动/重命名\nmv f1 f2 test # 移动文件到目录 mv f1 test/f3 # 移动并重命名 mv f1 f4 # 重命名文件 二、权限管理 权限格式：-rwxrwxrwx\nr=读, w=写, x=执行 三组权限：所有者(u)、所属组(g)、其他人(o) chmod：修改权限\nchmod a+r file # 所有用户添加读权限 chmod a-r file # 所有用户移除读权限 chmod u=rw,go= file # 所有者读写，其他用户无权限 三、文件链接 ln：创建链接\nln 1.log 2.log # 创建硬链接 ln -s 1.log 2.log # 创建软链接（符号链接） ln -sf 1.log 2.log # 强制覆盖现有链接 硬链接：直接指向文件数据 软链接：类似快捷方式（源文件删除则失效） 四、文件查看与搜索 查看文件内容：\ncat file.txt # …","date":1750204800,"dir":"post\\计算机系统1\\","expirydate":-62135596800,"fuzzywordcount":900,"html":"Linux和git的命令笔记","keywords":null,"kind":"page","lang":"en","lastmod":1750204800,"objectID":"52144c5df073e5b8ff3c472b0b07d03c","permalink":"https://tju-yxq.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F1/","publishdate":"2025-06-18T00:00:00Z","readingtime":2,"relpermalink":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F1/","section":"post","tags":["计算机系统"],"title":"计算机系统基础1 笔记1","type":"post","url":"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F1/","weight":0,"wordcount":863},{"author":null,"categories":["考试回忆"],"content":"一、填空题（10道） 21年的六道填空题都考到了 删表的语句是drop,删数据的语句是delete 二、简答题 恢复：关于具有检查点的恢复技术 并发控制 关系模式 三、程序设计题 和21年的题一样，只是有细微的修改\n四、综合设计题 只记得大概是以下这个的样子：\n某银行系统有以下业务需求：\n银行有多个分行，分行有分行编号、分行名称、地址等属性。 客户通过身份证号唯一标识，有姓名、联系方式、地址等属性。 银行账户分为储蓄账户和信用账户，它们都继承自账户实体。账户有账号、开户日期、账户状态等公共属性。储蓄账户有余额、年利率等属性；信用账户有信用额度、透支利率等属性。 客户与分行之间存在开户关系，一个客户可以在多个分行开户，一个分行有多个客户开户。 账户与分行之间通过开户关系关联，一个账户属于一个分行，一个分行有多个账户。 客户可以在银行申请贷款，贷款有贷款编号、贷款金额、贷款期限、申请日期等属性。贷款与分行和客户之间存在申请关系，一个客户可以申请多笔贷款，一笔贷款由一个分行发放。 贷款存在还款记录这一弱实体，依赖于贷款实体，有还款编号、还款日期、还款金额、还款方式等属性。 请根据以上业务需求，绘制 E - R 图并转化为关系模式。\n","date":1748908800,"dir":"post\\数据库系统概论\\","expirydate":-62135596800,"fuzzywordcount":500,"html":"填空，简答，程序设计和综合设计","keywords":null,"kind":"page","lang":"en","lastmod":1748908800,"objectID":"998b7c806bf6e02d5cb4e8b31c570d45","permalink":"https://tju-yxq.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/","publishdate":"2025-06-03T00:00:00Z","readingtime":1,"relpermalink":"/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/","section":"post","tags":["数据库"],"title":"数据库系统概论考试回忆版","type":"post","url":"/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/","weight":0,"wordcount":497},{"author":null,"categories":["考试回忆"],"content":"（一）选择题（30分,15道） 大数据摩尔定律：人类社会数据每2年就会翻一倍\npython中的三目运算符：min=x if x\u0026amp;lt;y else y\n聚类算法：K-Means算法不能直接对文本数据使用\n分类算法：KNN的一个距离，不确定是曼哈顿还是欧式距离\n分类问题的评估指标：我选的是精确率和召回率，还涉及了ROC曲线\n模块与包：选择错误的，我选的是模块不一定是.py文件，主要是我记得课件里面就是用.py文件创建的模块，以下是课件图\n负梯度下降算法：这个我是真没见过，但秉着“一定”就是错的原则，选了“负梯度下降算法会使模型一定更优”\n回归：选错的，我选了“按因变量个数多少，将回归问题分为线性回归和非线性回归”\n集合：应该是将列表导入set()，求结果，我选的是“{1,2,3}”\n列表的切片赋值：大概就是下面这个，给一个列表，对后面的赋值\n（二）简答题（20分，4道） 大数据的技术特点和生产方式 技术特点：5V（快速化、大量化、真实性、价值密度低，多样化）\n生产方式：……\npython中内置序列的特征\n元组、列表、字典、列表……自由发挥\n不可见对象和可见对象的概念，其在函数参数传递时的不同 数据分析的基本流程\n（三）程序填空（30分，15空） 反转字符串：leetcode第541题 印象中的答案：left+=1，right-=1，reverse(i，j)，i+k-1，2k\n房价预测：线性回归课件中的改编，加了一个pandas的独热编码（很美了）\n印象中的答案：\u0026amp;ldquo;建筑……\u0026amp;quot;，get_dummies()，mean,mean_houses,fit_transfomer，fit，predict，train_test_split，y_test，y_pred，coef_\n（四）综合分析题（20分，两道） 一道文科题，讨论大数据技术造福了哪些行业，说说“从IT时代迈向DT时代”这句话的理解 说一说维度灾难的定义、解决方案；说一说模型复杂度、过拟合、欠拟合的联系和三者的概念。 ","date":1748649600,"dir":"post\\python与数据分析\\","expirydate":-62135596800,"fuzzywordcount":900,"html":"选择，简答，程序填空和综合分析","keywords":null,"kind":"page","lang":"en","lastmod":1748649600,"objectID":"5463d8b992216df9fbfecb88cd38615f","permalink":"https://tju-yxq.github.io/post/python%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","publishdate":"2025-05-31T00:00:00Z","readingtime":2,"relpermalink":"/post/python%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","section":"post","tags":["python"],"title":"python与数据分析考试回忆版","type":"post","url":"/post/python%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","weight":0,"wordcount":816},{"author":null,"categories":null,"content":"About Me Hi, I\u0026amp;rsquo;m Duan, also known as 小段子 (Xiao Duanzi). I am an undergraduate student majoring in Cybersecurity at Tianjin University, currently conducting research in Professor Yitao Hu\u0026amp;rsquo;s lab with a focus on Text-to-Video generation.\nI am passionate about technology and firmly believe that the core purpose of code is to solve real-world problems. My primary focus is on Backend Development and Data Science, and I enjoy the process of uncovering value from vast amounts of data and transforming it into reliable products through robust software architecture. This blog is where I document my technical thoughts, project experiences, and learning journey.\nHonors \u0026amp;amp; Awards Honor Level 2024 Kaggle - NeurIPS 2024 - Lux AI Season 3 Bronze (Top 15) National NITRIO International Scholarship University-level 2025 MCM/ICM Honorable Mention National National College Mathematics Competition, First Prize (7th in Tianjin) Provincial/Ministry Tianjin College Mathematics Competition, First …","date":-62135596800,"dir":"about\\","expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://tju-yxq.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":384},{"author":null,"categories":null,"content":"Go 语言学习笔记 Envoy 学习笔记 ","date":-62135596800,"dir":"notes\\","expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"https://tju-yxq.github.io/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/notes/","section":"","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":12},{"author":null,"categories":null,"content":"","date":-62135596800,"dir":"search\\","expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://tju-yxq.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"","date":-62135596800,"dir":"archive\\","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://tju-yxq.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]